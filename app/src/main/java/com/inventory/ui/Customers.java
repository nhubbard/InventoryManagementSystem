/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.inventory.ui;

import com.inventory.dao.CustomerDAO;
import com.inventory.dto.CustomerDTO;
import com.inventory.ui.util.KeyReleasedListener;
import com.inventory.ui.util.MouseClickedListener;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.Objects;

import static javax.swing.GroupLayout.*;
import static javax.swing.GroupLayout.Alignment.*;
import static javax.swing.LayoutStyle.ComponentPlacement.*;

/**
 * @author ADMIN
 */
public class Customers extends JPanel {
    /**
     * Creates new form Customers
     */
    public Customers() {
        initComponents();
        loadData();
        customerCodeField.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        mainPanel = new JPanel();
        JLabel searchByLabel = new JLabel();
        searchField = new JTextField();
        JSeparator separator = new JSeparator();
        JTabbedPane tabbedPane = new JTabbedPane();
        JPanel inputPanel = new JPanel();
        customerNameField = new JTextField();
        phoneField = new JTextField();
        locationField = new JTextField();
        JLabel customerNameLabel = new JLabel();
        JLabel locationLabel = new JLabel();
        JLabel phoneLabel = new JLabel();
        JLabel addButton = new JLabel();
        JLabel editButton = new JLabel();
        JLabel deleteButton = new JLabel();
        JLabel clearButton = new JLabel();
        customerCodeField = new JTextField();
        JLabel clearLabel = new JLabel();
        JLabel editLabel = new JLabel();
        JLabel addLabel = new JLabel();
        JLabel deleteLabel = new JLabel();
        JLabel customersLabel = new JLabel();
        JScrollPane scrollPane = new JScrollPane();
        table = new JTable();

        mainPanel.addMouseListener((MouseClickedListener) this::mainPanelMouseClicked);

        GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(LEADING)
                .addGap(0, 921, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(LEADING)
                .addGap(0, 596, Short.MAX_VALUE)
        );

        searchByLabel.setText("SEARCH");

        searchField.setToolTipText("Search using Full Name Location, Phone OR Customer Code");
        searchField.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        searchField.addKeyListener((KeyReleasedListener) this::searchTextKeyReleased);

        inputPanel.setBorder(BorderFactory.createLineBorder(Color.black));

        customerNameLabel.setText("Customer's name");

        locationLabel.setText("Location");

        phoneLabel.setText("Phone");

        addButton.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/com/inventory/ui/images" +
            "/addPeople.png"))));
        addButton.addMouseListener((MouseClickedListener) this::addButtonMouseClicked);

        editButton.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/com/inventory/ui/images" +
            "/editPeople.png"))));
        editButton.addMouseListener((MouseClickedListener) this::editButtonMouseClicked);

        deleteButton.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/com/inventory/ui/images" +
            "/deletelarge" +
            ".png"))));
        deleteButton.addMouseListener((MouseClickedListener) this::deleteButtonMouseClicked);

        clearButton.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/com/inventory/ui/images" +
            "/clear.png"))));
        clearButton.addMouseListener((MouseClickedListener) this::clearButtonMouseClicked);

        clearLabel.setText("Clear");

        editLabel.setText("Edit");

        addLabel.setText("Add");

        deleteLabel.setText("Delete");

        GroupLayout inputPanelLayout = new GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(LEADING)
                .addGroup(inputPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(inputPanelLayout.createParallelGroup(TRAILING, false)
                        .addGroup(inputPanelLayout.createSequentialGroup()
                            .addGroup(inputPanelLayout.createParallelGroup(TRAILING)
                                .addGroup(inputPanelLayout.createParallelGroup(TRAILING)
                                    .addComponent(customerNameLabel, LEADING)
                                    .addComponent(locationLabel, LEADING))
                                .addComponent(phoneLabel, LEADING))
                            .addPreferredGap(RELATED)
                            .addGroup(inputPanelLayout.createParallelGroup(TRAILING, false)
                                .addComponent(locationField, LEADING, DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                .addComponent(phoneField)
                                .addComponent(customerNameField, LEADING)))
                        .addGroup(inputPanelLayout.createSequentialGroup()
                            .addGroup(inputPanelLayout.createParallelGroup(LEADING, false)
                                .addGroup(inputPanelLayout.createSequentialGroup()
                                    .addComponent(addButton)
                                    .addPreferredGap(RELATED)
                                    .addComponent(editButton)
                                    .addPreferredGap(RELATED))
                                .addGroup(inputPanelLayout.createSequentialGroup()
                                    .addPreferredGap(RELATED)
                                    .addComponent(addLabel)
                                    .addPreferredGap(RELATED, DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editLabel)
                                    .addGap(19, 19, 19)))
                            .addGroup(inputPanelLayout.createParallelGroup(LEADING)
                                .addComponent(deleteButton)
                                .addGroup(inputPanelLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(deleteLabel)))
                            .addPreferredGap(RELATED)
                            .addGroup(inputPanelLayout.createParallelGroup(LEADING)
                                .addGroup(inputPanelLayout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(clearLabel)
                                    .addPreferredGap(RELATED, 1, PREFERRED_SIZE))
                                .addComponent(clearButton))
                            .addPreferredGap(RELATED, 121, Short.MAX_VALUE)
                            .addComponent(customerCodeField, PREFERRED_SIZE, 12, PREFERRED_SIZE)))
                    .addContainerGap(46, Short.MAX_VALUE)));
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(LEADING)
                .addGroup(inputPanelLayout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addGroup(inputPanelLayout.createParallelGroup(BASELINE)
                        .addComponent(customerNameLabel)
                        .addComponent(customerNameField, PREFERRED_SIZE, 32, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(inputPanelLayout.createParallelGroup(BASELINE)
                        .addComponent(locationLabel)
                        .addComponent(locationField, PREFERRED_SIZE, 32, PREFERRED_SIZE))
                    .addPreferredGap(RELATED)
                    .addGroup(inputPanelLayout.createParallelGroup(BASELINE)
                        .addComponent(phoneField, PREFERRED_SIZE, 32, PREFERRED_SIZE)
                        .addComponent(phoneLabel))
                    .addGap(34, 34, 34)
                    .addGroup(inputPanelLayout.createParallelGroup(LEADING)
                        .addComponent(customerCodeField, PREFERRED_SIZE, 32, PREFERRED_SIZE)
                        .addGroup(inputPanelLayout.createSequentialGroup()
                            .addGroup(inputPanelLayout.createParallelGroup(LEADING)
                                .addComponent(editButton, TRAILING)
                                .addComponent(addButton, TRAILING)
                                .addComponent(deleteButton, TRAILING)
                                .addComponent(clearButton, TRAILING))
                            .addGap(4, 4, 4)
                            .addGroup(inputPanelLayout.createParallelGroup(BASELINE)
                                .addComponent(editLabel)
                                .addComponent(addLabel)
                                .addComponent(deleteLabel)
                                .addComponent(clearLabel))))
                    .addContainerGap(127, Short.MAX_VALUE)));

        tabbedPane.addTab("CUSTOMERS", inputPanel);

        customersLabel.setFont(new Font("Comfortaa", Font.BOLD, 24)); // NOI18N
        customersLabel.setForeground(new Color(0, 102, 204));
        customersLabel.setText("CUSTOMERS");

        table.setModel(new DefaultTableModel(
            new Object[][]{
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String[]{
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener((MouseClickedListener) this::tableMouseClicked);
        scrollPane.setViewportView(table);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(LEADING, false)
                        .addGroup(TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(customersLabel, DEFAULT_SIZE,
                                DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(387, 387, 387)
                            .addComponent(searchByLabel)
                            .addPreferredGap(RELATED)
                            .addComponent(searchField, PREFERRED_SIZE, 270,
                                PREFERRED_SIZE)
                            .addGap(228, 228, 228))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(scrollPane, PREFERRED_SIZE, 544,
                                        PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(560, 560, 560)
                                    .addComponent(tabbedPane, PREFERRED_SIZE,
                                        DEFAULT_SIZE, PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(separator, PREFERRED_SIZE, 970,
                                        PREFERRED_SIZE)))
                            .addGap(68, 68, 68)))
                    .addComponent(mainPanel, PREFERRED_SIZE,
                        DEFAULT_SIZE, PREFERRED_SIZE)
                    .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(LEADING)
                        .addComponent(mainPanel, PREFERRED_SIZE,
                            DEFAULT_SIZE, PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(TRAILING)
                                .addComponent(customersLabel)
                                .addGroup(layout.createParallelGroup(BASELINE)
                                    .addComponent(searchByLabel, PREFERRED_SIZE, 34,
                                        PREFERRED_SIZE)
                                    .addComponent(searchField, PREFERRED_SIZE, 30,
                                        PREFERRED_SIZE)))
                            .addPreferredGap(RELATED)
                            .addComponent(separator, PREFERRED_SIZE, 10,
                                PREFERRED_SIZE)
                            .addPreferredGap(RELATED)
                            .addGroup(layout.createParallelGroup(LEADING, false)
                                .addComponent(tabbedPane)
                                .addComponent(scrollPane, PREFERRED_SIZE,
                                    DEFAULT_SIZE, PREFERRED_SIZE))))
                    .addGap(0, 4, Short.MAX_VALUE))
        );
    }

    private void addButtonMouseClicked(MouseEvent ignoredEvt) {
        if (customerNameField.getText().equals("") || locationField.getText().equals("") || phoneField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill all the fields!");
        } else {
            CustomerDTO customerdto = new CustomerDTO();
            customerdto.setFullName(customerNameField.getText());
            customerdto.setLocation(locationField.getText());
            customerdto.setPhone(phoneField.getText());
            new CustomerDAO().addCustomerDAO(customerdto);
            loadData();
        }
    }

    private void tableMouseClicked(MouseEvent ignoredEvt) {
        int row = table.getSelectedRow();
        int column = table.getColumnCount();
        Object[] val = new Object[column];
        for (int i = 0; i < column; i++) val[i] = table.getValueAt(row, i);
        customerCodeField.setText((String) val[0]);
        customerNameField.setText((String) val[1]);
        locationField.setText((String) val[2]);
        phoneField.setText((String) val[3]);
    }

    private void editButtonMouseClicked(MouseEvent ignoredEvt) {
        if (table.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Select a table data first!");
        } else {
            if (customerNameField.getText().equals("") || locationField.getText().equals("") || phoneField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill all the fields!");
            } else {
                CustomerDTO customerdto = new CustomerDTO();
                customerdto.setCustomerCode(customerCodeField.getText());
                customerdto.setFullName(customerNameField.getText());
                customerdto.setLocation(locationField.getText());
                customerdto.setPhone(phoneField.getText());
                new CustomerDAO().editCustomerDAO(customerdto);
                loadData();
                // table.getColumn("customercode").setMaxWidth(0);
            }
        }
    }

    private void deleteButtonMouseClicked(MouseEvent ignoredEvt) {
        if (table.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Select a table data first!");
        } else {
            new CustomerDAO().deleteCustomerDAO(table.getValueAt(table.getSelectedRow(), 0).toString());
            loadData();
        }
    }

    private void clearButtonMouseClicked(MouseEvent ignoredEvt) {
        customerCodeField.setText("");
        customerNameField.setText("");
        locationField.setText("");
        phoneField.setText("");
    }

    private void searchTextKeyReleased(KeyEvent ignoredEvt) {
        String text = searchField.getText();
        loadSearchCustomersData(text);
    }

    private void mainPanelMouseClicked(MouseEvent ignoredEvt) {
        customerCodeField.setText("");
        customerNameField.setText("");
        locationField.setText("");
        phoneField.setText("");
    }

    public void loadData() {
        try {
            CustomerDAO customerDAO = new CustomerDAO();
            table.setModel(customerDAO.buildTableModel(customerDAO.getQueryResult()));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public void loadSearchCustomersData(String text) {
        try {
            CustomerDAO customerDAO = new CustomerDAO();
            table.setModel(customerDAO.buildTableModel(customerDAO.getSearchCustomersQueryResult(text)));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private JTextField customerCodeField;
    private JTextField customerNameField;
    private JTextField locationField;
    public JPanel mainPanel;
    private JTextField phoneField;
    private JTextField searchField;
    private JTable table;
}
